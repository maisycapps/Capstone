// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  userName String @unique
  email String
  password String
  bio String?
  // profileImg StringUrl
  role Role @default(USER)
  posts Post[]
  likes Likes[]
  trips Trips[] // One-to-many relationship with Trip
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trips {
  id Int @id @default(autoincrement())
  tripName String
  start DateTime @default(now())
  end DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int // Foreign key to User
  user User @relation(fields: [userId], references: [id])
  destination Destination[] @relation("TripDestinations")
}

model Post {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User[]
  //trip Trip @relation(fields: [userId]) --- something of this sort
  postTxt String
  likes Likes[] 
  //postImg
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  id Int @id @default(autoincrement())
  post Post @relation(fields: [postId], references: [id])
  postId Int @unique
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
}

model Destination {
  id Int @id @default(autoincrement())
  destinationName String @unique
  //destinationImg []
  createdAt DateTime @default(now())
  trips Trips[] @relation("TripDestinations")
}

enum Role {
  USER
  ADMIN
}

